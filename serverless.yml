org: lonedev
app: languvi-client
service: languvi-client
frameworkVersion: "3"

plugins:
  - serverless-bundle

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    USER_POOL_ID: { Ref: UserPool }
    CLIENT_ID: { Ref: UserClient }
    CLIENT_TABLE: ${self:service}-clientTable-${sls:stage}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}
    ORDERS_TABLE: ${self:custom.clientOrdersTable.name}
    CLIENT_BUCKET: ${self:custom.clientBucket.name}
    LANGUAGE_PAIR_TABLE: ${self:custom.languagePairTable.name}
    SERVICE_TABLE: ${self:custom.serviceTable.name}
    TOPICS_TABLE: ${self:custom.topicsTable.name}
    REGION: ${self:custom.region}
    API_KEY: ${self:custom.iyzicoApi.key}
    SECRET_KEY: ${self:custom.iyzicoApi.secret}
    URI: ${self:custom.iyzicoApi.uri}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminUpdateUserAttributes
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - 'dynamodb:Scan*'
            - sqs:SendMessage
            - s3:PutObject
            - "dynamodb:Query*"
          Resource:
            - ${self:custom.clientTableArn}
            - ${self:custom.userPoolArn}
            - ${self:custom.MailQueue.arn}
            - ${self:custom.clientOrdersTable.arn}
            - ${self:custom.serviceTable.arn}
            - ${self:custom.languagePairTable.arn}
            - ${self:custom.topicsTable.arn}
            - arn:aws:s3:::${self:custom.clientBucket.name}/*

  httpApi:
    cors: true
    authorizers:
      cAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: ${self:custom.cognitoIssuerUrl.Value}
        audience: 
          - !Ref UserClient

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: languvi-client-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8
        AutoVerifiedAttributes:
          - email

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: languvi-client-pool
        GenerateSecret: false
        UserPoolId: !Ref UserPool
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - 'ADMIN_NO_SRP_AUTH'
  
    ClientTable: 
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:service}-clientTable-${sls:stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName : email
            AttributeType: S
        KeySchema: 
          - AttributeName: email
            KeyType: HASH

    languviClientBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.clientBucket.name}
    
    languviClientBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref languviClientBucket
        PolicyDocument:
          Statement:
            - Sid: PublicRead
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.clientBucket.name}/*  
              
  Outputs:
    clientTableName:
      Value: ${self:service}-clientTable-${sls:stage}
      Export:
        Name: ${self:service}-clientTable-${sls:stage}-Name
    clientTableArn:
      Value: ${self:custom.clientTableArn}
      Export:
        Name: ${self:service}-clientTable-${sls:stage}-Arn
    clientbucketname:
      Value: ${self:custom.clientBucket.name}
      Export:
        Name: ${self:service}-clientBucket-${sls:stage}-Name
    clientbucketarn:
      Value: arn:aws:s3:::${self:custom.clientBucket.name}/*
      Export:
        Name: ${self:service}-clientBucket-${sls:stage}-Arn

functions:
  signup:
    handler: src/authentication/signup.handler
    events:
      - httpApi:
          path: /signup
          method: POST
    
  login:
    handler: src/authentication/signin.handler
    events:
      - httpApi:
          path: /signin
          method: POST
  
  updatepassword:
    handler: src/authentication/updatepassword.handler
    events:
      - httpApi:
          path: /updatepassword
          method: POST
          authorizer:
            name: cAuthorizer
  
  getToken:
    handler: src/authentication/generateToken.handler
    events:
      - httpApi:
          path: /auth_token
          method: POST

  confirmEmail:
    handler: src/authentication/confirmEmail.handler
    events:
      - httpApi:
          path: /auth_email
          method: POST
  
  clientAcc:
    handler: src/client/getprofile.handler
    events:
      - httpApi:
          path: /profile
          method: GET
          authorizer:
            name: cAuthorizer
            
  clientUpdate:
    handler: src/client/editprofile.handler
    events:
      - httpApi:
          path: /editprofile
          method: POST
          authorizer:
            name: cAuthorizer
  
  createorder:
    handler: src/client/placeorder.handler
    events:
      - httpApi:
          path: /order
          method: POST
          authorizer:
            name: cAuthorizer

  paybill:
    handler: src/client/pay.handler
    events: 
      - httpApi:
          path: /paybill/{orderId}
          method: POST

  getplan:
    handler: src/client/clientpackage.handler
    events: 
      - httpApi:
          path: /plan
          method: GET
          authorizer:
            name: cAuthorizer

  gettopicprice:
    handler: src/client/gettopicprice.handler
    events: 
      - httpApi:
          path: /topic
          method: POST
          authorizer:
            name: cAuthorizer

  getpairprice:
    handler: src/client/getpairprice.handler
    events: 
      - httpApi:
          path: /pair
          method: POST
          authorizer:
            name: cAuthorizer

  getorders:
    handler: src/client/getorders.handler
    events: 
      - httpApi:
          path: /orders
          method: GET
          authorizer:
            name: cAuthorizer
    
custom:
  clientTableArn: !GetAtt ClientTable.Arn
  userPoolArn: !GetAtt UserPool.Arn
  region: us-east-1
  cognitoIssuerUrl: 
    Value: !Join
      - ''
      - - 'https://cognito-idp.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com/'
        - !Ref UserPool
  clientBucket:
    name: languvi-client-bucket-${self:provider.stage}
  MailQueue:
    arn: !ImportValue MailQueue-${sls:stage}-Arn
    url: !ImportValue MailQueue-${sls:stage}-Url
  
  clientOrdersTable:
    name: !ImportValue clientOrdersTable-${self:provider.stage}-Name
    arn: !ImportValue clientOrdersTable-${self:provider.stage}-Arn
  topicsTable:
    name: !ImportValue topicsTableTable-${self:provider.stage}-Name
    arn: !ImportValue topicsTableTable-${self:provider.stage}-Arn
  languagePairTable:
    name: !ImportValue LanguagePairTable-${self:provider.stage}-Name
    arn: !ImportValue LanguagePairTable-${self:provider.stage}-Arn
  serviceTable:
    name: !ImportValue ServicesTable-${self:provider.stage}-Name
    arn: !ImportValue ServicesTable-${self:provider.stage}-Arn
  iyzicoApi:
    key: sandbox-bXOiNWy4HRcFvcROF8I1evQWPudyXrWg
    secret: sandbox-d6rVfj5gzyziXP3LQrn3oZthtWieidPt
    uri: https://sandbox-api.iyzipay.com

  bundle:
    linting: false
    externals:
      - iyzipay
    